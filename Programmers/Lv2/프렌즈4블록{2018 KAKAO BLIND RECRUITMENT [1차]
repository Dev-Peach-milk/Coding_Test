// https://school.programmers.co.kr/learn/courses/30/lessons/17679

function solution(m, n, board) {
  let answer = 0;

  // 중첩 배열 복사에 주의하자!
  let newBoard = board.map((block) => [...block]);
  board = board.map((block) => [...block]);

  // 잘못 복사한 코드
  // const newBoard = [...board].map(v => v.split(''))
  // board = board.map(v => v.split(''));

  // 다른 사람 코드 (concat을 왜썼지? 확실하게 새 배열로 만들기 위함일까? (concat은 원본 배열 훼손없이 새배열 반환함))
  //  let curBoard = [...board.map(block => [...block])].concat();
  // let newBoard = [...board.map(block => [...block])].concat();

  while (1) {
    let stop = true;

    const count = new Set();
    for (let i = 0; i < m - 1; i++) {
      for (let j = 0; j < n - 1; j++) {
        let std = board[i][j];
        if (std === 0) continue;
        if (
          std === board[i][j + 1] &&
          std === board[i + 1][j] &&
          std === board[i + 1][j + 1]
        ) {
          newBoard[i][j] = 0;
          newBoard[i][j + 1] = 0;
          newBoard[i + 1][j] = 0;
          newBoard[i + 1][j + 1] = 0;
          count.add(`${i},${j}`);
          count.add(`${i},${j + 1}`);
          count.add(`${i + 1},${j}`);
          count.add(`${i + 1},${j + 1}`);
          stop = false;
        }
      }
    }

    for (let i = m - 1; i > 0; i--) {
      if (!newBoard[i].some((v) => !v)) continue;

      for (let j = 0; j < n; j++) {
        if (newBoard[i][j] === 0) {
          for (let k = i - 1; k >= 0 && !newBoard[i][j]; k--) {
            if (newBoard[k][j] !== 0) {
              newBoard[i][j] = board[k][j];
              newBoard[k][j] = 0;
              break;
            }
          }
        }
      }
    }

    // 이부분도 복사 주의 필요한 부분!
    board = newBoard.map((block) => [...block]);
    answer += count.size;

    if (stop) break;
  }

  return answer;
}
